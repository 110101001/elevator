!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	ele.h	5;"	d
CFLAGS	makefile	/^CFLAGS=`pkg-config --cflags --libs gtk+-3.0  gthread-2.0`   -g    -export-dynamic -pthread$/;"	m
CLOSE	ele.h	/^typedef enum{OPEN,CLOSE} DOOR;$/;"	e	enum:__anon2
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/home\/wupeicong\/OS\/elevator$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/wupeicong\/OS\/elevator$/;"	m
CTRLER_H_	ctrler.h	2;"	d
DIR_	ele.h	/^typedef enum{STOP,UP,DOWN} DIR_;$/;"	t	typeref:enum:__anon1
DOOR	ele.h	/^typedef enum{OPEN,CLOSE} DOOR;$/;"	t	typeref:enum:__anon2
DOWN	ele.h	/^typedef enum{STOP,UP,DOWN} DIR_;$/;"	e	enum:__anon1
Del_task	ele.c	/^void Del_task(){$/;"	f
ELE	ctrler.h	7;"	d
ELE	ele.h	12;"	d
EQUALS	Makefile	/^EQUALS = =$/;"	m
ElE_H_	ele.h	2;"	d
FLOOR1	ctrler.h	4;"	d
FLOOR1	ele.h	9;"	d
FLOOR2	ctrler.h	5;"	d
FLOOR2	ele.h	10;"	d
FLOOR3	ctrler.h	6;"	d
FLOOR3	ele.h	11;"	d
FLOOR_UI	floor_ui.h	5;"	d
OBJ	makefile	/^OBJ=elevator$/;"	m
OPEN	ele.h	/^typedef enum{OPEN,CLOSE} DOOR;$/;"	e	enum:__anon2
P	smemory.c	/^void P(int semid){$/;"	f
PIPE_H_	pipe.h	2;"	d
PROCESS_H_	process.h	2;"	d
RM	Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
SCHEDULE_H_	schedule.h	2;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHMSIZE	smemory.h	5;"	d
SMEMORY_H_	smemory.h	2;"	d
SRC	makefile	/^SRC=ele.h ele.c main.c process.c process.h floor_ui.c floor_ui.h schedule.c smemory.h smemory.c elevator_ctrl_ui.h elevator_ctrl_ui.c$/;"	m
STOP	ele.h	/^typedef enum{STOP,UP,DOWN} DIR_;$/;"	e	enum:__anon1
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
TICK_PER_FLOOR	ele.h	7;"	d
UP	ele.h	/^typedef enum{STOP,UP,DOWN} DIR_;$/;"	e	enum:__anon1
V	smemory.c	/^void V(int semid){$/;"	f
VEL	ele.h	6;"	d
_ELEVATOR_CTRL_UI_H	elevator_ctrl_ui.h	2;"	d
argc	process.h	/^int argc;$/;"	v
argv	process.h	/^char **argv;$/;"	v
builder	floor_ui.h	/^GtkBuilder* builder;$/;"	v
byte	pipe.h	/^typedef unsigned char byte;$/;"	t
byte	smemory.h	/^typedef unsigned char byte;$/;"	t
clicked_to	elevator_ctrl_ui.c	/^void clicked_to(int floor){$/;"	f
close_door	elevator_ctrl_ui.h	/^GtkWidget* close_door;$/;"	v
create_ele_ui	elevator_ctrl_ui.c	/^void create_ele_ui()$/;"	f
create_electl_process	process.c	/^int create_electl_process(){$/;"	f
create_floor_process	process.c	/^int create_floor_process(int floor){$/;"	f
create_process	process.c	/^int create_process(){$/;"	f
dir	ele.c	/^DIR_ dir=STOP;$/;"	v
dir	ele.h	/^    DIR_ dir;$/;"	m	struct:state
dir	ele.h	/^    DIR_ dir;\/\/呼叫者要去的方向$/;"	m	struct:floor_task
door	ele.c	/^DOOR door=CLOSE;$/;"	v
door	ele.h	/^    DOOR door;$/;"	m	struct:state
ele_arrive	ele.c	/^void ele_arrive(){$/;"	f
ele_builder	elevator_ctrl_ui.h	/^GtkBuilder* ele_builder;$/;"	v
ele_dir	elevator_ctrl_ui.h	/^GtkWidget* ele_dir;$/;"	v
ele_main_loop	ele.c	/^void ele_main_loop(){$/;"	f
ele_move	ele.c	/^void ele_move(){$/;"	f
ele_print	elevator_ctrl_ui.c	/^void ele_print()$/;"	f
ele_state_update	ele.c	/^void ele_state_update(){$/;"	f
ele_switch	floor_ui.h	/^GtkWidget* ele_switch;$/;"	v
ele_task	ele.h	/^typedef struct ele_task{$/;"	s
ele_task	ele.h	/^}ele_task;$/;"	t	typeref:struct:ele_task
ele_task_addr	smemory.c	/^ele_task *ele_task_addr;$/;"	v
ele_window	elevator_ctrl_ui.h	/^GtkWidget* ele_window;$/;"	v
electl_display_loop	ctrler.c	/^void electl_display_loop(){$/;"	f
electl_main_loop	ctrler.c	/^int electl_main_loop(){$/;"	f
electl_op_loop	ctrler.c	/^void electl_op_loop(){$/;"	f
floor	ele.h	/^    float floor;$/;"	m	struct:state
floor	ele.h	/^    int floor;\/\/呼叫电梯的楼层$/;"	m	struct:floor_task
floor	ele.h	/^    int floor;\/\/电梯要去的楼层$/;"	m	struct:ele_task
floor1_dir	floor_ui.h	/^GtkWidget* floor1_dir;$/;"	v
floor1_down	floor_ui.h	/^GtkWidget* floor1_down;$/;"	v
floor1_rmntime	floor_ui.h	/^GtkWidget* floor1_rmntime;$/;"	v
floor1_up	floor_ui.h	/^GtkWidget* floor1_up;$/;"	v
floor1_window	floor_ui.h	/^GtkWidget* floor1_window;$/;"	v
floor_display_loop	ctrler.c	/^void floor_display_loop(){$/;"	f
floor_display_loop	floor_ui.c	/^void floor_display_loop(int floor)$/;"	f
floor_main_loop	ctrler.c	/^int floor_main_loop(int floor){$/;"	f
floor_op_loop	ctrler.c	/^void floor_op_loop(){$/;"	f
floor_task	ele.h	/^typedef struct floor_task{$/;"	s
floor_task	ele.h	/^}floor_task;$/;"	t	typeref:struct:floor_task
floor_task_addr	smemory.c	/^floor_task *floor_task_addr;$/;"	v
main	main.c	/^int main(int argc_,char *argv_[]){$/;"	f
now_floor	elevator_ctrl_ui.h	/^GtkWidget* now_floor;$/;"	v
nowfloor	floor_ui.h	/^GtkWidget* nowfloor;$/;"	v
open_door	elevator_ctrl_ui.h	/^GtkWidget* open_door;$/;"	v
pipe_fd	pipe.c	/^int pipe_fd[4][2];$/;"	v
pipe_init	pipe.c	/^int pipe_init(){$/;"	f
pipe_recv	pipe.c	/^int pipe_recv(int sender,byte *data,int len){$/;"	f
pipe_send	pipe.c	/^void pipe_send(int sender,byte *data,int len){$/;"	f
plan	elevator_ctrl_ui.h	/^GtkWidget* plan;$/;"	v
position	ele.c	/^int position=0;$/;"	v
schedule	schedule.c	/^int schedule(){$/;"	f
self	ctrler.c	/^int self; $/;"	v
semid	smemory.c	/^int semid=0;$/;"	v
set_ele_state	elevator_ctrl_ui.c	/^void set_ele_state(){$/;"	f
shm_init	smemory.c	/^void shm_init(){$/;"	f
shm_read	smemory.c	/^void shm_read(byte *addr,byte *data,int len){$/;"	f
shm_test	smemory.c	/^void shm_test(){$/;"	f
shm_write	smemory.c	/^void shm_write(byte *addr,byte *data,int len){$/;"	f
shmaddr	smemory.c	/^byte *shmaddr;$/;"	v
shmid	smemory.c	/^int shmid=0;$/;"	v
stage	ele.c	/^int stage=0;$/;"	v
state	ele.h	/^typedef struct state{$/;"	s
state	ele.h	/^}state;$/;"	t	typeref:struct:state
stateaddr	smemory.c	/^state *stateaddr;$/;"	v
target_floor	ele.c	/^int target_floor=0;$/;"	v
time	ele.h	/^    time_t time;$/;"	m	struct:ele_task
time	ele.h	/^    time_t time;$/;"	m	struct:floor_task
time_to_display	smemory.h	/^int time_to_display; $/;"	v
to_1	elevator_ctrl_ui.h	/^GtkWidget* to_1;$/;"	v
to_2	elevator_ctrl_ui.h	/^GtkWidget* to_2;$/;"	v
to_3	elevator_ctrl_ui.h	/^GtkWidget* to_3;$/;"	v
ui_creat	floor_ui.c	/^void ui_creat(int floor)$/;"	f
